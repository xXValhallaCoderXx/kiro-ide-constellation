{
  "enabled": true,
  "name": "Documentation Sync Checker",
  "description": "This hook analyzes the current /docs directory documentation and compares it against the latest code changes and codebase to ensure that documentation remains up to date with the actual implementation",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "docs/*",
      "src/**/*",
      "webview-ui/**/*",
      "package.json",
      "README.md",
      "*.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "# Kiro Agent – Repository Documentation Updater (Manual Hook)\n\n## Mission\n\nWhen manually triggered, update and improve repository documentation based on the **actual codebase state and recent changes**. Operate safely, be transparent, and produce high-quality, navigable docs that match project conventions.\n\n## Guardrails (always)\n\n**Read-only unless explicitly in APPLY mode.** Default to **DRY\\\\_RUN** and output proposed diffs; only write files/commit when `apply=true`.\\n*\n* **Main branch check:** Abort with a clear message if **current branch ≠ `main`**. Do **not** switch branches.\n* **Clean working tree:** Abort if there are **uncommitted changes**.\n* **Docs scope only:** May create/modify files under `/docs`, root `README`, and doc scaffolding files (e.g., `CONTRIBUTING.md`, `SECURITY.md`, `CHANGELOG.md`, `ADR/`). Do not touch the kiro steering docs inside of .kiro/steering.\n\n## Memory file\n\n* Path: `./kiro/.doc-memory.md`\n* Purpose: records the **last docs checkpoint commit** and lightweight context so the agent can compute diffs next time.\n* If missing → treat as **first run** (full baseline), but still enforce the **main branch** & **clean tree** checks.\n\n### Memory file format (append-safe Markdown)\n\n```\n# Docs Memory\n\n- last_checkpoint: <GIT_SHA>\n- last_run: <ISO_DATETIME>\n- docs_scope:\n  - base_path: /docs\n  - includes: [README.md, CONTRIBUTING.md, SECURITY.md, ADR/, CHANGELOG.md]\n  - excludes: [**/node_modules/**, **/dist/**]\n\n- inventory:\n  - files_count: <int>\n  - sections: [overview, setup, architecture, api, operations, security, contributing, changelog]\n  - custom_notes: |\n      Any repo-specific notes for next run (e.g., “Monorepo packages under /packages”)\n\n- recent_findings:\n  - gaps: [ ... ]\n  - followups: [ ... ]\n```\n\n> On completion, update `last_checkpoint` with current `HEAD` and refresh the inventory snapshot.\n\n---\n\n## Required outputs (every run)\n\n1. **Docs Update Plan** at `docs/_reports/docs-update-plan.md`\n   – a structured plan of what will change and why.\n2. **Proposed changes** (DRY\\_RUN) or **applied changes** (APPLY) with a summary table (file → action).\n3. **Quality report** at `docs/_reports/docs-quality-checks.md`\n   – broken links, missing sections, style lint results, orphan files.\n4. **PR summary** at `docs/_reports/docs-pr-summary.md`\n   – copy-pasteable, with reviewer checklist.\n5. **Updated `.doc-memory.md`** (if APPLY).\n\n---\n\n## Phase 0 – Pre-flight (hard stops)\n\n* Verify:\n\n  * current branch is **main**\n  * working tree **clean**\n  * repo root detected (top-level `.git`)\n* Read (or create in memory) `./kiro/.doc-memory.md`.\n* Determine **checkpoint SHA**:\n\n  * if memory exists → use `last_checkpoint`\n  * else → use **the initial commit that introduced docs** or `HEAD~0` (first run uses **full scan** but still records `HEAD` at the end)\n* Set **mode**: `DRY_RUN` unless the manual trigger explicitly sets `apply=true`.\n\n**If any check fails:** abort with a concise message and suggestions.\n\n---\n\n## Phase 1 – Analyze codebase & recent changes\n\n**Goal:** Understand what changed since the checkpoint and what that implies for docs.\n\nCollect:\n\n* **Diff set** between `checkpoint..HEAD` (renames included).\n\n  * new/removed/modified files\n  * added/removed exports, public APIs, CLI commands, config files\n  * added/changed **scripts** (package managers), **env vars**, **migrations**\n* **Structural inventory** (quick scan):\n\n  * packages/modules, key entry points, service boundaries\n  * notable tech: frameworks, data stores, messaging, auth, feature flags\n* **Churn pulse (last 30–90 days)**:\n\n  * top-changed areas (path prefixes)\n  * any large deletions or renames\n* **Operations signals** (if present): dockerfiles, compose, k8s manifests, CI workflows\n* **Security signals**: secret scanning ignore files, auth middlewares, RBAC config\n\nProduce a **mapping**: change → documentation impact category:\n\n* **Architecture** (diagrams, modules, boundaries)\n* **API & Contracts** (REST/GraphQL/gRPC/Events, schemas, error shapes)\n* **Setup & Environments** (env vars, services, bootstrapping)\n* **Operations/Runbooks** (deploy, migrations, health checks)\n* **Developer Experience** (scripts, local dev, tests)\n* **Security** (authZ/authN, data handling, secrets)\n* **Changelog / Release notes**\n\nOutput section **“What changed & why it matters for docs.”**\n\n---\n\n## Phase 2 – Analyze current docs (`/docs` + first-class files)\n\n**Goal:** Spot gaps, rot, and inconsistencies.\n\nCheck:\n\n* **Presence** of core docs:\n\n  * `README.md` (purpose, quickstart, tech stack, links)\n  * `docs/architecture.md` (+ diagrams / Mermaid)\n  * `docs/api/*` (human overview; link to generated API if any)\n  * `docs/operations.md` (runbooks, deploy, migrations, backups)\n  * `docs/security.md` (auth flows, data classification, secrets)\n  * `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`\n  * `CHANGELOG.md` (or releases notes)\n  * `docs/onboarding.md` (first-day setup)\n  * `docs/troubleshooting.md`\n  * `docs/adr/0001-record-architecture-decisions.md` (if ADRs used)\n* **Quality**:\n\n  * titles use sentence case; sections have consistent hierarchy\n  * code fences have language tags\n  * internal links are relative and valid; no broken anchors\n  * images/diagrams present & referenced; consider `docs/diagrams/*`\n  * last-updated notes (optional)\n* **Coverage vs Phase 1**: where changes imply doc edits but no doc exists\n* **Redundancy**: overlapping pages, stale copies\n* **Navigation**:\n\n  * an index or sidebar exists (`docs/README.md` → ToC)\n  * deep links to key workflows (setup, common tasks)\n\nOutput **“Doc debt report”** listing gaps, stale pages, broken links, and suggested merges/splits.\n\n---\n\n## Phase 3 – Update docs (generate or revise)\n\n**Goal:** Produce clear, minimal, accurate updates anchored to the diff.\n\nFor each impacted category from Phase 1:\n\n* Propose **edits or new files** and include short rationale.\n* When APPLY:\n\n  * Write/update files with:\n\n    * concise intros (“why”), task instructions (“how”), and references (“where next”)\n    * diagrams in Mermaid when applicable (keep sources in repo)\n    * tables for env vars (name, default, required, description)\n    * API sections with request/response examples and error notes\n    * operational runbooks: deploy, rollback, migration, monitoring checks\n    * security disclaimers: auth flows, least privilege, data retention\n  * Update **README** pointers to new/changed docs\n  * Add **CHANGELOG.md** entry (docs) with categorized bullets\n* When DRY\\_RUN:\n\n  * Emit **unified diffs** or clear “proposed new file content” blocks in the plan.\n\n**Writing standards**\n\n* Follow `.kiro/steering` tone and structure.\n* Keep paragraphs short; use lists for steps.\n* Use consistent headers (`##`, `###`) and a stable ToC.\n* Prefer relative links; ensure they render on Git hosts.\n* Include **Context → Steps → Validation → Troubleshooting** where applicable.\n\n---\n\n## Phase 4 – Consolidate, organize, and finalize\n\n**Goal:** Ensure the docs collection remains coherent as it grows.\n\nDo:\n\n* **Split** overly long or mixed-concern pages; **merge** near-duplicate pages.\n* Ensure there’s a **single index** (e.g., `docs/README.md`) linking primary topics.\n* Normalize filenames and headings (e.g., `architecture.md`, `operations.md`).\n* Run **markdown checks** (formatting, broken links) and fix issues.\n* Re-generate diagram exports if needed (optional).\n* Prepare **PR bundle**:\n\n  * `docs/_reports/docs-pr-summary.md` with:\n\n    * Purpose & scope\n    * Key changes list\n    * Reviewer checklist (accuracy, links, tone)\n    * Follow-ups (if any)\n* Update **`.doc-memory.md`** with new `last_checkpoint = HEAD`.\n\n---\n\n## Commit & PR policy (APPLY mode)\n\n* Create branch: `docs/update-<YYYYMMDD>-<shorttopic>`\n* Commit rules:\n\n  * Conventional commit: `docs: …` / `docs(architecture): …`\n  * One logical commit or a tidy series (≤ 3)\n  * Include `docs/_reports/docs-update-plan.md` in the PR\n* Open PR with the prepared summary. Assign default reviewers if configured.\n\n---\n\n## Quality gates\n\nBefore marking success, ensure:\n\n* No broken links (relative or absolute) in changed docs.\n* All code blocks have language tags.\n* README quickstart runs (sanity sniff test if steps changed).\n* Titles and sections conform to steering rules.\n* Changelog updated if user wants release notes.\n* `.doc-memory.md` updated (APPLY) **or** proposed update noted (DRY\\_RUN).\n\n---\n\n## Agent I/O and controls\n\n**Inputs**\n\n* `apply: boolean` (default `false`)\n* `docsPath: string` (default `/docs`)\n* `checkpointOverride?: string` (git SHA; optional)\n* `scopes?: string[]` (e.g., `[\"api\",\"architecture\"]` to limit work)\n\n**Outputs**\n\n* Paths to generated reports\n* Summary of proposed/applied changes\n* Next-run notes (what to monitor next)\n\n**Commands/tools the agent may use (examples)**\n\n* Git: list changed files, show diffs, detect renames\n* FS: read/write files under `docs` and whitelisted roots\n* Lint: markdown lint / link checker (if available) or lightweight internal checks\n* Diagram: allow Mermaid blocks in Markdown (no external rendering required for POC)\n\n---\n\n## “Docs Update Plan” (report skeleton)\n\nPlace at `docs/_reports/docs-update-plan.md`:\n\n* **Context**\n\n  * Checkpoint → HEAD\n  * Summary of codebase changes (bullets)\n* **Impacted doc areas** (with rationale)\n* **Planned edits & new files** (by path)\n\n  * For each: *why, what, where referenced*\n* **Proposed structure changes** (splits/merges)\n* **Risks / open questions**\n* **Apply vs Dry-run note**\n\n---\n\n## Failure modes & responses\n\n* **Not on main:** Abort. “Switch to `main` and re-run.”\n* **Dirty working tree:** Abort. “Commit/stash changes and re-run.”\n* **Memory missing (first run):** Proceed as baseline; record `HEAD`.\n* **Large diff (> N files):** Proceed but flag “large update” in plan; propose staged PRs.\n* **Write conflicts (APPLY):** Abort with diff; leave DRY\\_RUN artifacts for manual review.\n\n---\n\n## Example high-value doc deltas to look for\n\n* New endpoints/controllers → update `docs/api/*` and diagrams\n* New environment variables → `docs/operations.md` env table\n* Package scripts changed → `README` / `CONTRIBUTING.md`\n* Migrations added → `operations.md` + runbook\n* Auth/refactor across services → `architecture.md` + sequence diagram\n* New module/package → `architecture.md` module table\n\n---\n\n## Success criteria\n\n* Clear, actionable **Update Plan** exists.\n* Changed docs accurately reflect **diff since checkpoint**.\n* Docs set remains **coherent** (index, links, headings consistent).\n* `.doc-memory.md` moved to current HEAD with a refreshed snapshot.\n* In DRY\\_RUN, maintainers can copy the proposed diffs and apply them verbatim.\n\n---\n"
  }
}