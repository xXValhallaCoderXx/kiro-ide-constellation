{
  "enabled": true,
  "name": "Steering Documents Sync",
  "description": "Monitors changes to steering documents in the .kiro/steering directory and ensures the kiro steering agent has the latest versions for accurate guidance and assistance",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      ".kiro/steering/*.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "# Kiro Agent — Steering Docs Composer (Manual Hook)\n\n## Mission\n\nWhen **manually triggered**, (re)generate and maintain high-quality **Kiro Steering docs** that guide the IDE agent’s behavior. Always produce the 3 **global** steering files — **product.md**, **structure.md**, **tech.md** — and create **domain-scoped steering docs** (e.g., **server.md**, **ui.md**, **components.md**) that include code and artifacts using **inclusion rules**. Keep the set coherent, safe, and up to date with the repository.\n\n## Guardrails (always)\n\n* **Mode:** Default **DRY\\_RUN** (propose diffs). Only write/commit when `apply=true`.\n* **Branch:** Abort if current branch ≠ **main**. Do **not** switch branches automatically.\n* **Clean tree:** Abort if uncommitted changes exist.\n* **Scope of writes:** Only under `.kiro/steering/` (and this hook’s memory file) unless explicitly told otherwise.\n* **Project conventions:** Read `.kiro/steering/` to match tone, structure, tokens, and any house rules before writing anything.\n\n## Memory file\n\n* Path: `.kiro/.steering-memory.md`\n* Purpose: remember the **checkpoint commit** and a compact snapshot (domains discovered, rule counts, last run).\n* If missing → treat as **first run**; still enforce branch/clean checks.\n\n**Suggested memory layout (append-safe markdown):**\n\n```\n# Steering Memory\n\n- last_checkpoint: <GIT_SHA>\n- last_run: <ISO_DATETIME>\n- domains_detected: [server, ui, components]\n- rules_summary:\n  - global:\n      includes: <count>\n      excludes: <count>\n  - server: { includes: <count>, excludes: <count>, sample_matches: <N> }\n  - ui: { ... }\n  - components: { ... }\n\n- notes: |\n    free-form: anomalies, false positives, paths to watch next time\n```\n\nOn APPLY, update `last_checkpoint` to current `HEAD`.\n\n---\n\n## Inclusion Rules (what the hook must know and apply)\n\n### Global steering docs (always present)\n\nEach global doc has **purpose** and **recommended includes** (globs are examples—resolve to your repo’s structure). Exclude rules below apply universally.\n\n1. **product.md** (vision, users, value, major capabilities)\n\n* **Include (non-code context):**\n\n  * `README.md` (top sections)\n  * `docs/**` high-level overviews (overview, goals, FAQs)\n  * Roadmap/release notes if present (summaries only)\n* **Avoid including:** large API refs or changelogs verbatim — link or summarize.\n\n2. **structure.md** (how the repo is organized; boundaries)\n\n* **Include (structure signals):**\n\n  * top-level folder map: e.g., `src/**`, `apps/**`, `packages/**`, `services/**`\n  * module indexes (`index.ts` files), routing tables, feature folders\n  * dependency graph snapshot (your scan output JSON distilled, not raw)\n  * build/monorepo manifests (`package.json` workspaces, pnpm/yarn workspace files)\n* **Prefer excerpts:** directory trees, module lists, and **links** to deeper scoped docs.\n\n3. **tech.md** (stack, tooling, workflows)\n\n* **Include (tooling signals):**\n\n  * `package.json` scripts + selected deps (only key frameworks/tooling)\n  * `tsconfig.*`, lint/format config (`.eslintrc*`, `.prettierrc*`)\n  * CI/CD workflow summaries (`.github/workflows/*.yml` names)\n  * runtime ops hints (Dockerfiles, compose service names, Procfiles)\n* **Summarize:** do not dump entire config—extract **why it matters**.\n\n### Domain-scoped steering docs (created/updated if relevant)\n\nThe agent should **detect domains** from paths and create/update steering for each domain with domain-specific **instructions** and **includes**. Start with these three; add more if detected.\n\n**Common resolution heuristics (configure per repo as needed):**\n\n* **server** (backend):\n\n  * Likely roots: `server/**`, `api/**`, `backend/**`, `src/server/**`, `apps/*-api/**`, `services/**`\n  * Include: handlers/controllers, service layers, data adapters, schema/validators, migrations\n* **ui** (frontend app shells):\n\n  * Likely roots: `ui/**`, `app/**`, `src/app/**`, `apps/*-web/**`\n  * Include: routes/pages, app shell, state/store setup, theming/config\n* **components** (shared UI libs):\n\n  * Likely roots: `components/**`, `src/components/**`, `packages/*-ui/**`, `libs/ui/**`\n  * Include: component sources, stories, snapshot tests, style tokens\n\n**For each domain doc (e.g., `.kiro/steering/server.md`):**\n\n* **Purpose:** what the agent should optimize for here (e.g., safe refactors, API reasoning).\n* **Inclusion goals:** practical slices the agent will need (e.g., “controllers + service contracts + validation schemas”).\n* **Include patterns (examples to resolve in repo):** small, focused globs (cap the match count, see limits).\n* **Ordering hints:** prefer entry points → contracts → implementations → tests.\n* **Caveats:** unsafe or noisy zones (generated code, vendor libs, massive data files).\n\n### Exclusions (apply to all includes unless explicitly overridden)\n\n* `**/node_modules/**`, `**/dist/**`, `**/.next/**`, `**/build/**`, `**/coverage/**`, `**/.turbo/**`, `**/.cache/**`\n* generated assets: `**/*.map`, `**/*.min.*`, `**/*.png`, `**/*.jpg`, `**/*.svg` (unless specifically required)\n* secrets/credentials: `.env*`, `**/secrets/**`, `**/*.key`, `**/*.pem`\n* large binary/data: `**/*.sqlite`, `**/*.csv`, `**/*.ndjson`, `**/*.parquet` (unless a tiny fixture)\n* vendored source: `**/vendor/**`, `**/third_party/**`\n* lockfiles: `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`\n\n### Inclusion limits & budgets\n\n* Default **max files per doc**: 60\n* Default **max bytes per file** considered: 200 KB\n* If a pattern matches > limit, **rank** candidates by:\n\n  1. **fan-in** (consumers), then 2) **recent git churn**, then 3) **depth from domain entry**\n     Include top N; log truncation in the doc’s “Notes”.\n* Keep **ordering stable**: entry points first, then contracts, then impl, then tests/examples.\n\n---\n\n## Phased Operation\n\n### Phase 0 — Pre-flight\n\n* Verify **main** and **clean** working tree; detect repo root.\n* Load `.kiro/.steering-memory.md` if present:\n\n  * set `checkpoint = last_checkpoint`, else `checkpoint = HEAD~0` for first run\n* Read `.kiro/steering/` to capture house style (headings, tone, tokens).\n\n### Phase 1 — Analyze codebase & changes (since checkpoint)\n\n* Detect **domains** from folder structure and package manifests.\n* Compute diff `checkpoint..HEAD`:\n\n  * file adds/removes/renames\n  * API/contract hotspots (exports added, schema files changed, route maps modified)\n  * churn by path prefix (last 30–90 days)\n* Produce a **domain map**:\n\n  * domains present, their roots, and notable entry points\n\n### Phase 2 — Audit current steering docs\n\n* Inventory `.kiro/steering/`:\n\n  * global docs present? (**product.md**, **structure.md**, **tech.md** must exist)\n  * domain docs present? (server/ui/components/…)\n  * inclusion blocks: counts, globs coverage, any collisions or duplicates\n* Check **safety**:\n\n  * ensure exclusions are honored\n  * ensure each doc’s includes resolve to ≤ max files\n* Produce a **gap report**:\n\n  * missing domain docs\n  * stale/global docs that need refresh due to Phase-1 changes\n  * inclusion matches that are 0 (bad pattern) or overly broad (trim)\n\n### Phase 3 — Compose or update steering docs\n\n* **Global (always):**\n\n  * Refresh **product.md**, **structure.md**, **tech.md** with short narrative sections and **inclusion blocks** appropriate to each (not raw dumps).\n* **Domain-scoped:**\n\n  * For each detected domain (server, ui, components, etc.):\n\n    * Create/update `<domain>.md` with:\n\n      * **Purpose** (what the agent should do here)\n      * **Conventions** (naming, error handling, state/store, HTTP codes)\n      * **“When in doubt” guidance** (safety rails)\n      * **Inclusion rules** (the globs you resolved; ranked + capped)\n      * **Notes** (truncation, excluded zones, sensitive files)\n* **Recent-changes shard (optional but useful):**\n\n  * Create/update a small `recent-changes.md` steering doc that includes **only** files changed since `checkpoint` (capped), to bias the agent toward fresh areas.\n\n> In DRY\\_RUN: emit proposed new file content and diff blocks.\n> In APPLY: write under `.kiro/steering/`, creating folders as needed.\n\n### Phase 4 — Validate, consolidate, and finalize\n\n* Resolve all inclusion patterns and produce counts:\n\n  * per doc: `N included, M excluded, K skipped (too large)`\n* Ensure **no cross-duplication** explosions (the same huge tree matched in multiple docs). If so, narrow patterns and document rationale.\n* Reconcile naming and headings (match `.kiro/steering` conventions).\n* Generate:\n\n  * **Steering Plan**: `.kiro/steering/_reports/steering-update-plan.md`\n\n    * domains, includes/excludes per doc, match counts, gaps fixed\n  * **Safety Report**: `.kiro/steering/_reports/steering-safety-checks.md`\n\n    * any near-misses (secrets/binaries), giant files skipped, zero-match patterns\n* On APPLY: update `.kiro/.steering-memory.md` with new `last_checkpoint = HEAD`.\n\n---\n\n## Outputs (every run)\n\n* Updated or proposed **product.md**, **structure.md**, **tech.md** (always)\n* Created/updated domain docs (server/ui/components/… as detected)\n* **Steering Plan** report with resolved pattern counts\n* **Safety Report** (sensitive files avoided; oversize/overbroad patterns)\n* Updated **memory** (APPLY) or memory-diff proposal (DRY\\_RUN)\n\n---\n\n## Quality rules (content)\n\n* Avoid dumping entire files/configs; include **focused excerpts** or **link** to them.\n* Headings consistent; brief intro per doc explaining **how the agent should behave**.\n* Each inclusion block lists:\n\n  * pattern(s) used,\n  * **why** those sources are included,\n  * cap applied and how ranking chose representatives.\n* Keep all file paths **workspace-relative** (POSIX separators).\n* No secrets, binaries, or giant blobs in includes.\n* Tone: concise, actionable, aligned with `.kiro/steering` style.\n\n---\n\n## Success criteria\n\n* Global steering docs exist and are coherent.\n* Domain docs reflect real project domains with safe, capped includes.\n* Inclusion patterns resolve without errors; counts reported and sensible.\n* Memory advanced to `HEAD` (APPLY) or proposed update produced (DRY\\_RUN).\n* The agent’s behavior should improve measurably: better grounding and safer actions in each domain.\n\n---\n\n## Failure modes & responses\n\n* **Not on main / dirty tree:** abort with instructions to switch/commit.\n* **No domains detected:** still generate global docs; flag action needed to configure domains.\n* **Overbroad patterns:** auto-trim with ranking + caps; record what was trimmed and why.\n* **Zero-match patterns:** keep out of docs; report in Safety Report with suggestions.\n\n---\n\n### One-liner trigger prompt\n\n> “Run **Steering Docs Composer** (DRY\\_RUN by default). Enforce main/clean. Always refresh global steering (**product.md**, **structure.md**, **tech.md**). Detect domains (server/ui/components), create/update scoped steering with capped, ranked **inclusion rules** and universal **exclusions**. Produce plan + safety reports. Update `.kiro/.steering-memory.md` on APPLY.”\n\n---\n\nIf you want, I can turn this into a tiny checklist for your task runner (phases → tasks → artifacts) or draft the **report skeletons** so they drop directly into `.kiro/steering/_reports/`.\n"
  }
}